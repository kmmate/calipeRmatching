// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// cpp_cm_set_number_of_threads
int cpp_cm_set_number_of_threads(int nr_threads);
RcppExport SEXP _calipeRmatching_cpp_cm_set_number_of_threads(SEXP nr_threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nr_threads(nr_threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_cm_set_number_of_threads(nr_threads));
    return rcpp_result_gen;
END_RCPP
}
// cpp_test_cm
int cpp_test_cm();
RcppExport SEXP _calipeRmatching_cpp_test_cm() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_test_cm());
    return rcpp_result_gen;
END_RCPP
}
// cpp_cm_cm_known_propscore
Rcpp::List cpp_cm_cm_known_propscore(const Rcpp::NumericVector y, const Rcpp::NumericVector d, const Rcpp::NumericVector propscore, double delta, bool estimate_variance, double beta, double alpha, double kappa_a, double kappa_gamma);
RcppExport SEXP _calipeRmatching_cpp_cm_cm_known_propscore(SEXP ySEXP, SEXP dSEXP, SEXP propscoreSEXP, SEXP deltaSEXP, SEXP estimate_varianceSEXP, SEXP betaSEXP, SEXP alphaSEXP, SEXP kappa_aSEXP, SEXP kappa_gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type d(dSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type propscore(propscoreSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< bool >::type estimate_variance(estimate_varianceSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type kappa_a(kappa_aSEXP);
    Rcpp::traits::input_parameter< double >::type kappa_gamma(kappa_gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_cm_cm_known_propscore(y, d, propscore, delta, estimate_variance, beta, alpha, kappa_a, kappa_gamma));
    return rcpp_result_gen;
END_RCPP
}
// cpp_cm_cm
Rcpp::List cpp_cm_cm(const Rcpp::NumericVector y, const Rcpp::NumericVector d, const Rcpp::NumericMatrix x, std::string modeltype, const Rcpp::NumericVector theta, double delta, bool estimate_variance, double beta, double alpha, double kappa_a, double kappa_gamma, double kappa_gamma_derivative);
RcppExport SEXP _calipeRmatching_cpp_cm_cm(SEXP ySEXP, SEXP dSEXP, SEXP xSEXP, SEXP modeltypeSEXP, SEXP thetaSEXP, SEXP deltaSEXP, SEXP estimate_varianceSEXP, SEXP betaSEXP, SEXP alphaSEXP, SEXP kappa_aSEXP, SEXP kappa_gammaSEXP, SEXP kappa_gamma_derivativeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type d(dSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::string >::type modeltype(modeltypeSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< bool >::type estimate_variance(estimate_varianceSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type kappa_a(kappa_aSEXP);
    Rcpp::traits::input_parameter< double >::type kappa_gamma(kappa_gammaSEXP);
    Rcpp::traits::input_parameter< double >::type kappa_gamma_derivative(kappa_gamma_derivativeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_cm_cm(y, d, x, modeltype, theta, delta, estimate_variance, beta, alpha, kappa_a, kappa_gamma, kappa_gamma_derivative));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_calipeRmatching_cpp_cm_set_number_of_threads", (DL_FUNC) &_calipeRmatching_cpp_cm_set_number_of_threads, 1},
    {"_calipeRmatching_cpp_test_cm", (DL_FUNC) &_calipeRmatching_cpp_test_cm, 0},
    {"_calipeRmatching_cpp_cm_cm_known_propscore", (DL_FUNC) &_calipeRmatching_cpp_cm_cm_known_propscore, 9},
    {"_calipeRmatching_cpp_cm_cm", (DL_FUNC) &_calipeRmatching_cpp_cm_cm, 12},
    {NULL, NULL, 0}
};

RcppExport void R_init_calipeRmatching(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
